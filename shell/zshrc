

autoload -U compinit
compinit

export EDITOR=vim

autoload colors
colors

bindkey -e

alias ll='ls -l'
alias gg='git lga'
alias be='bundle exec'
alias br='bin/rails'
alias spec='bundle exec rspec'
alias bake='bundle exec rake'
alias brsp='bundle exec spring rails'
alias specsp='bundle exec spring rspec'
alias bakesp='bundle exec spring rake'
alias -s rb='ruby'
alias mv='mv -i'

export PATH="/usr/local/bin:$HOME/.rbenv/bin:$HOME/.rbenv/shims:$HOME/bin:$HOME/.cabal/bin:$PATH"
export PATH=$HOME/.nodebrew/current/bin:$PATH
eval "$(rbenv init -)"

export GREP_OPTIONS='--color=auto'

is_git_repo() {
  $(git rev-parse --is-inside-work-tree &> /dev/null)
}

is_git_dir() {
  $(git rev-parse --is-inside-git-dir 2> /dev/null)
}

get_git_branch() {
  local branch_name

  # Get the short symbolic ref
  branch_name=$(git symbolic-ref --quiet --short HEAD 2> /dev/null) ||
    # If HEAD isn't a symbolic ref, get the short SHA
  branch_name=$(git rev-parse --short HEAD 2> /dev/null) ||
    # Otherwise, just give up
  branch_name="(unknown)"

  printf $branch_name
}

# Git status information
prompt_git() {
  local git_info git_state uc us ut st

  if ! is_git_repo || is_git_dir; then
    return 1
  fi

  git_info=$(get_git_branch)

  # Check for uncommitted changes in the index
  if ! $(git diff --quiet --ignore-submodules --cached); then
    uc="+"
  fi

  # Check for unstaged changes
  if ! $(git diff-files --quiet --ignore-submodules --); then
    us="!"
  fi

  # Check for untracked files
  if [ -n "$(git ls-files --others --exclude-standard)" ]; then
    ut="?"
  fi

  # Check for stashed files
  if $(git rev-parse --verify refs/stash &>/dev/null); then
    st="$"
  fi

  git_state=$uc$us$ut$st

  # Combine the branch name and state information
  if [ $git_state ]; then
    git_info="$git_info[$git_state]"
  fi

  printf "${WHITE} on ${style_branch}${git_info}"
}


PROMPT='[%F{green}%m%f %c]%# '
#PS1="[%F{green}%m%f %c] [%~] ${prompt_git}
#%# "
RPROMPT='[%~]'

export LANG=ja_JP.UTF-8

#export CLICOLOR=1
#export LSCOLORS=ExFxCxDxBxegedabagacad
if [ -e ~/.specific_zsh ]; then
  source ~/.specific_zsh
fi


### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

# DOCKER ENV
#export DOCKER_HOST=
#export DOCKER_CERT_PATH=
#export DOCKER_TLS_VERIFY=


